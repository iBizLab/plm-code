<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper	namespace="cn.ibizlab.plm.core.wiki.mapper.BaselinePageMapper">

        <!--通过mybatis将查询结果注入到entity中,通过配置autoMapping="true"由mybatis自动处理映射关系 -->
    <resultMap id="BaselinePageResultMap" type="cn.ibizlab.plm.core.wiki.domain.BaselinePage" autoMapping="true">
		<result property="principalId" column="principal_id" />
		<result property="ownerType" column="owner_type" />
		<result property="principalType" column="principal_type" />
		<result property="targetType" column="target_type" />
		<result property="targetId" column="target_id" />
		<result property="targetVersionId" column="target_version_id" />
		<result property="curVersionId" column="cur_version_id" />
		<result property="createMan" column="create_man" />
		<result property="createTime" column="create_time" />
		<result property="updateMan" column="update_man" />
		<result property="updateTime" column="update_time" />
        <association property="baselinePrincipalPage" javaType="cn.ibizlab.plm.core.base.domain.Baseline" column="principal_id" select="cn.ibizlab.plm.core.base.mapper.BaselineMapper.selectById" fetchType="lazy"></association>
        <association property="targetVersion" javaType="cn.ibizlab.plm.core.base.domain.Version" column="target_version_id" select="cn.ibizlab.plm.core.base.mapper.VersionMapper.selectById" fetchType="lazy"></association>
    </resultMap>

    <select id="selectById"  resultMap="BaselinePageResultMap">
        select t1.* from ( <include refid="view" /> ) t1 
         where 
         t1.id=#{ id }
    </select>

    <select id="selectEntity" parameterType="cn.ibizlab.plm.core.wiki.domain.BaselinePage" resultMap="BaselinePageResultMap">
        <include refid="view" /> 
         where 
         (t1.id = #{ id })
    </select>

    <select id="selectEntities" parameterType="java.util.List" resultMap="BaselinePageResultMap">
        <include refid="view" /> 
         where 
         (t1.id)
         in (<foreach collection="list" item="item" index="index" separator=","> (#{ item.id }) </foreach>)
    </select>


    <sql id="default" databaseId="mysql">
         <![CDATA[ SELECT t1.`CREATE_MAN`, t1.`CREATE_TIME`, t1.`CUR_VERSION_ID`, t1.`ID`, t1.`NAME`, t1.`OWNER_TYPE`, t1.`PRINCIPAL_ID`, t1.`PRINCIPAL_TYPE`, t1.`TARGET_ID`, t1.`TARGET_TYPE`, t1.`TARGET_VERSION_ID`, t1.`UPDATE_MAN`, t1.`UPDATE_TIME` FROM `RELATION` t1   ]]>  
    </sql>

    <sql id="view" databaseId="mysql">
         <![CDATA[ SELECT t1.`CREATE_MAN`, t1.`CREATE_TIME`, t1.`CUR_VERSION_ID`, t1.`ID`, t1.`NAME`, t1.`OWNER_TYPE`, t1.`PRINCIPAL_ID`, t1.`PRINCIPAL_TYPE`, t1.`TARGET_ID`, t1.`TARGET_TYPE`, t1.`TARGET_VERSION_ID`, t1.`UPDATE_MAN`, t1.`UPDATE_TIME` FROM `RELATION` t1   ]]>  
    </sql>

    <sql id="fillVersionData" databaseId="mysql">
         <![CDATA[ SELECT t1.`CREATE_MAN`, t1.`CREATE_TIME`, t1.`CUR_VERSION_ID`, t1.`ID`, t1.`NAME`, t1.`OWNER_TYPE`, t1.`PRINCIPAL_ID`, t1.`PRINCIPAL_TYPE`, t1.`TARGET_ID`, t1.`TARGET_TYPE`, t1.`TARGET_VERSION_ID`, t1.`UPDATE_MAN`, t1.`UPDATE_TIME` FROM `RELATION` t1   ]]>  where  <![CDATA[ ( t1.`PRINCIPAL_ID` = #{ctx.webcontext.baseline}  AND  t1.`PRINCIPAL_TYPE` = 'baseline'  AND  t1.`TARGET_TYPE` = 'PAGE' ) ]]> 
    </sql>

    <select id="searchDefault"  parameterType="cn.ibizlab.plm.core.wiki.filter.BaselinePageSearchContext"  resultMap="BaselinePageResultMap">
        select t1.* 
        from (
            <include refid="default"/>
        ) t1 
        <where><if test="ew!=null and ew.sqlSegment!=null and !ew.emptyOfWhere">${ew.sqlSegment}</if></where>
        <if test="ew!=null and ew.sqlSegment!=null and ew.emptyOfWhere">${ew.sqlSegment}</if>
        
    </select>


    <select id="listDefault"  parameterType="cn.ibizlab.plm.core.wiki.filter.BaselinePageSearchContext"  resultMap="BaselinePageResultMap">
        select t1.*
        from (
            <include refid="default"/>
        ) t1
        <where><if test="ew!=null and ew.sqlSegment!=null and !ew.emptyOfWhere">${ew.sqlSegment}</if></where>
        <if test="ew!=null and ew.sqlSegment!=null and ew.emptyOfWhere">${ew.sqlSegment}</if>
        
    </select>

    <select id="searchFillVersionData"  parameterType="cn.ibizlab.plm.core.wiki.filter.BaselinePageSearchContext"  resultMap="BaselinePageResultMap">
        select t1.* 
        from (
            <include refid="fillVersionData"/>
        ) t1 
        <where><if test="ew!=null and ew.sqlSegment!=null and !ew.emptyOfWhere">${ew.sqlSegment}</if></where>
        <if test="ew!=null and ew.sqlSegment!=null and ew.emptyOfWhere">${ew.sqlSegment}</if>
        
    </select>


    <select id="listFillVersionData"  parameterType="cn.ibizlab.plm.core.wiki.filter.BaselinePageSearchContext"  resultMap="BaselinePageResultMap">
        select t1.*
        from (
            <include refid="fillVersionData"/>
        ) t1
        <where><if test="ew!=null and ew.sqlSegment!=null and !ew.emptyOfWhere">${ew.sqlSegment}</if></where>
        <if test="ew!=null and ew.sqlSegment!=null and ew.emptyOfWhere">${ew.sqlSegment}</if>
        
    </select>

    <select id="findByPrincipalId" resultMap="BaselinePageResultMap">
        select t1.* from (
            <include refid="default"/>
        ) t1
        where principal_id in <foreach item="id" index="index" collection="principalIds" open="(" separator="," close=")">#{id}</foreach> 
    </select>

    <select id="findByTargetVersionId" resultMap="BaselinePageResultMap">
        select t1.* from (
            <include refid="default"/>
        ) t1
        where target_version_id in <foreach item="id" index="index" collection="targetVersionIds" open="(" separator="," close=")">#{id}</foreach> 
    </select>


</mapper>